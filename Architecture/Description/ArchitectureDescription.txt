System Architecture Breakdown

1. User Interface (UI)
•	Tool: Streamlit or Gradio
•	Function: Entry point where the user types commands or interacts via buttons.
•	Role: Converts human intent into structured prompts.
________________________________________

2. LangChain Router
•	Tool: LangChain
•	Function: Parses user input and routes it to the appropriate agent (Task Agent, Health Agent, or Doc Summary Agent).
•	Why: Central brain coordinating requests.
________________________________________

3. Agents
Each agent encapsulates a domain of logic or tools:

•	Task Agent
o	Handles reminders, to-dos, scheduling tasks.
o	Interacts with external tools like Google Calendar.
o	Stores and retrieves task data in memory (ChromaDB or SQLite).

•	Health Agent
o	Simulated or mock logic for demo.
o	Can respond to queries like “How did I sleep last week?” based on static or placeholder data.

•	Doc Summary Agent
o	Accepts URLs or text blobs, uses LLM API to summarize.
o	Interacts directly with OpenRouter or HuggingFace LLMs.
________________________________________

4. Memory Store
•	Tool: ChromaDB (for semantic memory) or SQLite (for structured notes/tasks).
•	Purpose: Persistent storage for user data, reminders, goals, etc.
________________________________________

5. LLM API
•	Tool: OpenRouter (free LLM API gateway) or HuggingFace Inference API.
•	Purpose: Performs summarization, intent parsing, or response generation.
________________________________________

6. Tool APIs
•	Examples: GitHub API, Google Calendar, Notion API.
•	Purpose: Automate tasks like issue tracking, meeting creation, or note fetching.
________________________________________

7. Task Scheduler
•	Tool: APScheduler (Python)
•	Function: Periodically triggers actions—like reminders or agent polling.
________________________________________

8. Local Storage
•	Tool: JSON files or SQLite DB
•	Purpose: Backup or primary store for task state, config, logs, etc.
________________________________________

Benefits of This Architecture
•	All components run locally or on free-tier services.
•	Modular: Each part (UI, agents, memory, LLM) can be replaced or scaled.
•	Fast iteration: Change prompts or logic in Python without full-stack code.
•	Privacy-friendly: No data leaves your environment unless via API.
•	Natural interaction: Chat-driven and context-aware.
